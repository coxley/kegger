[{"/home/coxley/kegger/www/src/index.tsx":"1","/home/coxley/kegger/www/src/App.tsx":"2"},{"size":273,"mtime":1657520545738,"results":"3","hashOfConfig":"4"},{"size":3573,"mtime":1657565411169,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qryw0v",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"/home/coxley/kegger/www/src/index.tsx",[],[],"/home/coxley/kegger/www/src/App.tsx",["13","14","15","16"],[],"import React, { useEffect, useReducer, useState } from 'react';\n\nimport useWebSocket from 'react-use-websocket';\n\n\nfunction App() {\n  const stats = useStats()\n  const latestPour = usePours()\n  return (\n    <div className=\"h-screen w-screen bg-blue-200\">\n      <div className=\"grid grid-cols-6 grid-rows-6 h-screen\">\n        {Object.entries(stats.records).map((item) => {\n          const name = item[0]\n          const records = item[1]\n\n          let total_ounces = 0\n          let total_pulses = 0\n          for (let rec in records) {\n            total_ounces += records[rec].ounces\n            total_pulses += records[rec].pulses\n          }\n          let classes = \"\"\n          if (name === \"1\") {\n            classes = \"col-start-2 col-end-4\"\n          } else if (name === \"2\") {\n            classes = \"col-start-4 col-end-6\"\n          }\n\n\n          const pourStatus = (latestPour.tap.toString() === name && latestPour.active) ? <span className=\"text-green-500\">{latestPour.ounces.toFixed(2)}oz</span> : <span className=\"text-orange-500\">Inactive</span>\n          return (\n            <div className={\"row-start-2 row-end-5 bg-gray-100 border-gray-800 rounded-md shadow-md h-auto m-10\" + \" \" + classes}>\n              <div className=\"flex items-end h-12 border-b-gray-300 shadow-sm border-b bg-gray-50\">\n                <span className=\"pb-2 pl-2\">\n                  Tap {name}\n                </span>\n              </div>\n              <div className=\"isolate flex flex-col px-2 pt-4\">\n                <div className=\"flex flex-row justify-between\">\n                  <span className=\"text-left font-medium\">Pour Status</span>\n                  <span className=\"text-right\">{pourStatus}</span>\n                </div>\n                <div className=\"flex flex-row justify-between\">\n                  <span className=\"text-left font-medium\">Total Pours</span>\n                  <span className=\"text-right\">{records.length}</span>\n                </div>\n                <div className=\"flex flex-row justify-between\">\n                  <span className=\"text-left font-medium\">Total Ounces</span>\n                  <span className=\"text-right\">{total_ounces.toFixed(2)}oz</span>\n                </div>\n                <div className=\"flex flex-row justify-between\">\n                  <span className=\"text-left font-medium\">Total Pulses</span>\n                  <span className=\"text-right\">{total_pulses}</span>\n                </div>\n              </div>\n            </div>\n          )\n        })}\n      </div>\n    </div >\n  );\n}\n\ninterface Stats {\n  total_pulses: number,\n  total_ounces: number,\n  records: { [tap: number]: Record[] },\n}\n\ninterface Record {\n  timestamp: number,\n  tap: number,\n  pulses: number,\n  ounces: number,\n}\n\nconst addr = \"ws://192.168.100.126:80/stats\"\nfunction useStats(): Stats {\n  const { lastJsonMessage } = useWebSocket(addr, {\n    shouldReconnect: (_) => true,\n  });\n\n  if (!lastJsonMessage) {\n    return { total_pulses: 0, total_ounces: 0, records: [] }\n  }\n  return lastJsonMessage as unknown as Stats\n}\n\nconst pourAddr = \"ws://192.168.100.126:80/pours\"\ntype pourState = {\n  timestamp: number, tap: number, active: boolean, pulses: number, ounces: number\n}\nfunction usePours(): pourState {\n  const { lastJsonMessage } = useWebSocket(pourAddr, {\n    shouldReconnect: (_) => true,\n  });\n\n  if (!lastJsonMessage) {\n    return { timestamp: 0, tap: 0, active: false, pulses: 0, ounces: 0 }\n  }\n\n  // TODO: adjust to allow both to be active\n  // TODO: flow rate, etc\n  return lastJsonMessage as unknown as pourState\n}\n\n\n\nexport default App;\n",{"ruleId":"17","severity":1,"message":"18","line":1,"column":17,"nodeType":"19","messageId":"20","endLine":1,"endColumn":26},{"ruleId":"17","severity":1,"message":"21","line":1,"column":28,"nodeType":"19","messageId":"20","endLine":1,"endColumn":38},{"ruleId":"17","severity":1,"message":"22","line":1,"column":40,"nodeType":"19","messageId":"20","endLine":1,"endColumn":48},{"ruleId":"23","severity":1,"message":"24","line":32,"column":114,"nodeType":"25","messageId":"26","endLine":32,"endColumn":115},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useReducer' is defined but never used.","'useState' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat"]
{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useEventSource = void 0;\n\nvar react_1 = require(\"react\");\n\nvar use_websocket_1 = require(\"./use-websocket\");\n\nvar constants_1 = require(\"./constants\");\n\nvar useEventSource = function useEventSource(url, _a, connect) {\n  if (_a === void 0) {\n    _a = constants_1.DEFAULT_EVENT_SOURCE_OPTIONS;\n  }\n\n  var withCredentials = _a.withCredentials,\n      events = _a.events,\n      options = __rest(_a, [\"withCredentials\", \"events\"]);\n\n  if (connect === void 0) {\n    connect = true;\n  }\n\n  var optionsWithEventSource = __assign(__assign({}, options), {\n    eventSourceOptions: {\n      withCredentials: withCredentials\n    }\n  });\n\n  var eventsRef = (0, react_1.useRef)(constants_1.EMPTY_EVENT_HANDLERS);\n\n  if (events) {\n    eventsRef.current = events;\n  }\n\n  var _b = (0, use_websocket_1.useWebSocket)(url, optionsWithEventSource, connect),\n      lastMessage = _b.lastMessage,\n      readyState = _b.readyState,\n      getWebSocket = _b.getWebSocket;\n\n  (0, react_1.useEffect)(function () {\n    if (lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.type) {\n      Object.entries(eventsRef.current).forEach(function (_a) {\n        var type = _a[0],\n            handler = _a[1];\n\n        if (type === lastMessage.type) {\n          handler(lastMessage);\n        }\n      });\n    }\n  }, [lastMessage]);\n  return {\n    lastEvent: lastMessage,\n    readyState: readyState,\n    getEventSource: getWebSocket\n  };\n};\n\nexports.useEventSource = useEventSource;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAGO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAC5BC,GAD4B,EAE5BC,EAF4B,EAG5BC,OAH4B,EAGL;EADvB;IAAAD,KAA8DE,wCAA9D;EAA0F;;EAAxF,mBAAe,qBAAf;EAAA,IAAiBC,MAAM,YAAvB;EAAA,IAA4BC,OAAO,cAArC,6BAAqC,CAAnC;;EACF;IAAAH;EAAuB;;EAEvB,IAAMI,sBAAsB,yBACrBD,OADqB,GACd;IACVE,kBAAkB,EAAE;MAClBC,eAAe;IADG;EADV,CADc,CAA5B;;EAMA,IAAMC,SAAS,GAAG,oBAAiCN,gCAAjC,CAAlB;;EACA,IAAIC,MAAJ,EAAY;IACVK,SAAS,CAACC,OAAV,GAAoBN,MAApB;EACD;;EAEK,SAIF,kCACFJ,GADE,EAEFM,sBAFE,EAGFJ,OAHE,CAJE;EAAA,IACJS,WAAW,iBADP;EAAA,IAEJC,UAAU,gBAFN;EAAA,IAGJC,YAAY,kBAHR;;EAUN,uBAAU;IACR,IAAIF,WAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAEG,IAAjB,EAAuB;MACnBC,MAAM,CAACC,OAAP,CAAeP,SAAS,CAACC,OAAzB,EAAkCO,OAAlC,CAA0C,UAAChB,EAAD,EAAgB;YAAda,IAAI;YAAEI,OAAO;;QACrD,IAAIJ,IAAI,KAAKH,WAAW,CAACG,IAAzB,EAA+B;UAC3BI,OAAO,CAACP,WAAD,CAAP;QACH;MACJ,CAJD;IAKH;EACF,CARD,EAQG,CAACA,WAAD,CARH;EAUA,OAAO;IACLQ,SAAS,EAAER,WADN;IAELC,UAAU,YAFL;IAGLQ,cAAc,EAAEP;EAHX,CAAP;AAKD,CAzCM;;AAAMQ,yBAActB,cAAd","names":["useEventSource","url","_a","connect","constants_1","events","options","optionsWithEventSource","eventSourceOptions","withCredentials","eventsRef","current","lastMessage","readyState","getWebSocket","type","Object","entries","forEach","handler","lastEvent","getEventSource","exports"],"sources":["/home/coxley/kegger/web/node_modules/react-use-websocket/src/lib/use-event-source.ts"],"sourcesContent":["import { useEffect, useRef } from 'react'\nimport { useWebSocket } from './use-websocket'\nimport { DEFAULT_EVENT_SOURCE_OPTIONS, EMPTY_EVENT_HANDLERS } from './constants'\nimport { EventSourceOptions, Options, EventSourceHook, EventSourceEventHandlers } from './types';\n\nexport const useEventSource = (\n  url: string | (() => string | Promise<string>) | null,\n  { withCredentials, events, ...options }: EventSourceOptions = DEFAULT_EVENT_SOURCE_OPTIONS,\n  connect: boolean = true,\n): EventSourceHook => {\n  const optionsWithEventSource: Options = {\n      ...options,\n      eventSourceOptions: {\n        withCredentials,\n      }\n  };\n  const eventsRef = useRef<EventSourceEventHandlers>(EMPTY_EVENT_HANDLERS);\n  if (events) {\n    eventsRef.current = events\n  }\n\n  const {\n    lastMessage,\n    readyState,\n    getWebSocket,\n  } = useWebSocket(\n    url,\n    optionsWithEventSource,\n    connect,\n  );\n\n  useEffect(() => {\n    if (lastMessage?.type) {\n        Object.entries(eventsRef.current).forEach(([type, handler]) => {\n            if (type === lastMessage.type) {\n                handler(lastMessage);\n            }\n        });\n    }\n  }, [lastMessage]);\n\n  return {\n    lastEvent: lastMessage,\n    readyState,\n    getEventSource: getWebSocket,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}
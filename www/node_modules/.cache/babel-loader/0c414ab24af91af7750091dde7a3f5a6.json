{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.websocketWrapper = void 0;\n\nvar websocketWrapper = function (webSocket, start) {\n  return new Proxy(webSocket, {\n    get: function (obj, key) {\n      var val = obj[key];\n      if (key === 'reconnect') return start;\n\n      if (typeof val === 'function') {\n        console.error('Calling methods directly on the websocket is not supported at this moment. You must use the methods returned by useWebSocket.'); //Prevent error thrown by invoking a non-function\n\n        return function () {};\n      } else {\n        return val;\n      }\n    },\n    set: function (obj, key, val) {\n      if (/^on/.test(key)) {\n        console.warn('The websocket\\'s event handlers should be defined through the options object passed into useWebSocket.');\n        return false;\n      } else {\n        obj[key] = val;\n        return true;\n      }\n    }\n  });\n};\n\nexports.websocketWrapper = websocketWrapper;\nexports.default = exports.websocketWrapper;","map":{"version":3,"mappings":";;;;;;;AAUO,IAAMA,gBAAgB,GAAG,UAC9BC,SAD8B,EAE9BC,KAF8B,EAEK;EAGnC,OAAO,IAAIC,KAAJ,CAAqBF,SAArB,EAAgC;IACrCG,GAAG,EAAE,UAACC,GAAD,EAAMC,GAAN,EAA0B;MAC7B,IAAMC,GAAG,GAAGF,GAAG,CAACC,GAAD,CAAf;MACA,IAAKA,GAAW,KAAK,WAArB,EAAkC,OAAOJ,KAAP;;MAClC,IAAI,OAAOK,GAAP,KAAe,UAAnB,EAA+B;QAC7BC,OAAO,CAACC,KAAR,CAAc,+HAAd,EAD6B,CAG7B;;QACA,OAAO,aAAQ,CAAf;MACD,CALD,MAKO;QACL,OAAOF,GAAP;MACD;IACF,CAZoC;IAarCG,GAAG,EAAE,UAAoCL,GAApC,EAAoDC,GAApD,EAA4DC,GAA5D,EAA6E;MAChF,IAAI,MAAMI,IAAN,CAAWL,GAAX,CAAJ,EAAqB;QACnBE,OAAO,CAACI,IAAR,CAAa,wGAAb;QACA,OAAO,KAAP;MACD,CAHD,MAGO;QACLP,GAAG,CAACC,GAAD,CAAH,GAAWC,GAAX;QACA,OAAO,IAAP;MACD;IACF;EArBoC,CAAhC,CAAP;AAuBD,CA5BM;;AAAMM,2BAAgBb,gBAAhB;AA8Bba,kBAAeA,wBAAf","names":["websocketWrapper","webSocket","start","Proxy","get","obj","key","val","console","error","set","test","warn","exports"],"sources":["/home/coxley/kegger/web/node_modules/react-use-websocket/src/lib/proxy.ts"],"sourcesContent":["import { MutableRefObject } from 'react';\n\ntype IfEquals<X, Y, A=X, B=never> =\n  (<T>() => T extends X ? 1 : 2) extends\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\n\ntype WritableKeys<T> = {\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>\n}[keyof T];\n\nexport const websocketWrapper = (\n  webSocket: WebSocket,\n  start: MutableRefObject<() => void>,\n): WebSocket => {\n\n  return new Proxy<WebSocket>(webSocket, {\n    get: (obj, key: keyof WebSocket) => {\n      const val = obj[key];\n      if ((key as any) === 'reconnect') return start;\n      if (typeof val === 'function') {\n        console.error('Calling methods directly on the websocket is not supported at this moment. You must use the methods returned by useWebSocket.');\n        \n        //Prevent error thrown by invoking a non-function\n        return () => {};\n      } else {\n        return val;\n      }\n    },\n    set: <T extends WritableKeys<WebSocket>>(obj: WebSocket, key: T, val: WebSocket[T]) => {\n      if (/^on/.test(key)) {\n        console.warn('The websocket\\'s event handlers should be defined through the options object passed into useWebSocket.')\n        return false;\n      } else {\n        obj[key] = val;\n        return true;\n      }\n    },\n  });\n};\n\nexport default websocketWrapper;\n"]},"metadata":{},"sourceType":"script"}
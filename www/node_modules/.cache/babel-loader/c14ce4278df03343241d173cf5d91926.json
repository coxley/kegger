{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSocketIO = void 0;\n\nvar react_1 = require(\"react\");\n\nvar use_websocket_1 = require(\"./use-websocket\");\n\nvar constants_1 = require(\"./constants\");\n\nvar emptyEvent = {\n  type: 'empty',\n  payload: null\n};\n\nvar getSocketData = function (event) {\n  if (!event || !event.data) {\n    return emptyEvent;\n  }\n\n  var match = event.data.match(/\\[.*]/);\n\n  if (!match) {\n    return emptyEvent;\n  }\n\n  var data = JSON.parse(match);\n\n  if (!Array.isArray(data) || !data[1]) {\n    return emptyEvent;\n  }\n\n  return {\n    type: data[0],\n    payload: data[1]\n  };\n};\n\nvar useSocketIO = function (url, options, connect) {\n  if (options === void 0) {\n    options = constants_1.DEFAULT_OPTIONS;\n  }\n\n  if (connect === void 0) {\n    connect = true;\n  }\n\n  var optionsWithSocketIO = (0, react_1.useMemo)(function () {\n    return __assign(__assign({}, options), {\n      fromSocketIO: true\n    });\n  }, []);\n\n  var _a = (0, use_websocket_1.useWebSocket)(url, optionsWithSocketIO, connect),\n      sendMessage = _a.sendMessage,\n      sendJsonMessage = _a.sendJsonMessage,\n      lastMessage = _a.lastMessage,\n      readyState = _a.readyState,\n      getWebSocket = _a.getWebSocket;\n\n  var socketIOLastMessage = (0, react_1.useMemo)(function () {\n    return getSocketData(lastMessage);\n  }, [lastMessage]);\n  return {\n    sendMessage: sendMessage,\n    sendJsonMessage: sendJsonMessage,\n    lastMessage: socketIOLastMessage,\n    lastJsonMessage: socketIOLastMessage,\n    readyState: readyState,\n    getWebSocket: getWebSocket\n  };\n};\n\nexports.useSocketIO = useSocketIO;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAQA,IAAMA,UAAU,GAAwB;EACtCC,IAAI,EAAE,OADgC;EAEtCC,OAAO,EAAE;AAF6B,CAAxC;;AAKA,IAAMC,aAAa,GAAG,UAACC,KAAD,EAA2C;EAC/D,IAAI,CAACA,KAAD,IAAU,CAACA,KAAK,CAACC,IAArB,EAA2B;IACzB,OAAOL,UAAP;EACD;;EAED,IAAMM,KAAK,GAAGF,KAAK,CAACC,IAAN,CAAWC,KAAX,CAAiB,OAAjB,CAAd;;EAEA,IAAI,CAACA,KAAL,EAAY;IACV,OAAON,UAAP;EACD;;EAED,IAAMK,IAAI,GAAGE,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAb;;EAEA,IAAI,CAACG,KAAK,CAACC,OAAN,CAAcL,IAAd,CAAD,IAAwB,CAACA,IAAI,CAAC,CAAD,CAAjC,EAAsC;IACpC,OAAOL,UAAP;EACD;;EAED,OAAO;IACLC,IAAI,EAAEI,IAAI,CAAC,CAAD,CADL;IAELH,OAAO,EAAEG,IAAI,CAAC,CAAD;EAFR,CAAP;AAID,CArBD;;AAuBO,IAAMM,WAAW,GAAG,UACzBC,GADyB,EAEzBC,OAFyB,EAGzBC,OAHyB,EAGF;EADvB;IAAAD,UAAmBE,2BAAnB;EAAkC;;EAClC;IAAAD;EAAuB;;EAEvB,IAAME,mBAAmB,GAAG,qBAAQ;IAAM,6BACrCH,OADqC,GAC9B;MACVI,YAAY,EAAE;IADJ,CAD8B;EAGxC,CAH0B,EAGxB,EAHwB,CAA5B;;EAKM,SAMF,kCAEFL,GAFE,EAGFI,mBAHE,EAIFF,OAJE,CANE;EAAA,IACJI,WAAW,iBADP;EAAA,IAEJC,eAAe,qBAFX;EAAA,IAGJC,WAAW,iBAHP;EAAA,IAIJC,UAAU,gBAJN;EAAA,IAKJC,YAAY,kBALR;;EAaN,IAAMC,mBAAmB,GAAG,qBAAQ;IAClC,oBAAa,CAACH,WAAD,CAAb;EAA0B,CADA,EACE,CAACA,WAAD,CADF,CAA5B;EAGA,OAAO;IACLF,WAAW,aADN;IAELC,eAAe,iBAFV;IAGLC,WAAW,EAAEG,mBAHR;IAILC,eAAe,EAAED,mBAJZ;IAKLF,UAAU,YALL;IAMLC,YAAY;EANP,CAAP;AAQD,CAlCM;;AAAMG,sBAAWd,WAAX","names":["emptyEvent","type","payload","getSocketData","event","data","match","JSON","parse","Array","isArray","useSocketIO","url","options","connect","constants_1","optionsWithSocketIO","fromSocketIO","sendMessage","sendJsonMessage","lastMessage","readyState","getWebSocket","socketIOLastMessage","lastJsonMessage","exports"],"sources":["/home/coxley/kegger/web/node_modules/react-use-websocket/src/lib/use-socket-io.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { useWebSocket } from './use-websocket'\nimport { DEFAULT_OPTIONS } from './constants'\nimport { JsonValue, Options, WebSocketHook } from './types';\n\nexport interface SocketIOMessageData {\n  type: string,\n  payload: JsonValue | null,\n}\n\nconst emptyEvent: SocketIOMessageData = {\n  type: 'empty',\n  payload: null,\n}\n\nconst getSocketData = (event: WebSocketEventMap['message'] | null): SocketIOMessageData => {\n  if (!event || !event.data) {\n    return emptyEvent\n  }\n\n  const match = event.data.match(/\\[.*]/)\n\n  if (!match) {\n    return emptyEvent\n  }\n\n  const data = JSON.parse(match)\n\n  if (!Array.isArray(data) || !data[1]) {\n    return emptyEvent\n  }\n\n  return {\n    type: data[0],\n    payload: data[1],\n  }\n}\n\nexport const useSocketIO = (\n  url: string | (() => string | Promise<string>) | null,\n  options: Options = DEFAULT_OPTIONS,\n  connect: boolean = true,\n): WebSocketHook<SocketIOMessageData, SocketIOMessageData> => {\n  const optionsWithSocketIO = useMemo(() => ({\n    ...options,\n    fromSocketIO: true,\n  }), [])\n\n  const {\n    sendMessage,\n    sendJsonMessage,\n    lastMessage,\n    readyState,\n    getWebSocket,\n  } = useWebSocket(\n\n    url,\n    optionsWithSocketIO,\n    connect,\n  );\n\n  const socketIOLastMessage = useMemo(() =>\n    getSocketData(lastMessage), [lastMessage]);\n\n  return {\n    sendMessage,\n    sendJsonMessage,\n    lastMessage: socketIOLastMessage,\n    lastJsonMessage: socketIOLastMessage,\n    readyState,\n    getWebSocket,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}
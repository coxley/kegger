{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.attachListeners = void 0;\n\nvar socket_io_1 = require(\"./socket-io\");\n\nvar constants_1 = require(\"./constants\");\n\nvar util_1 = require(\"./util\");\n\nvar bindMessageHandler = function (webSocketInstance, optionsRef, setLastMessage) {\n  webSocketInstance.onmessage = function (message) {\n    optionsRef.current.onMessage && optionsRef.current.onMessage(message);\n\n    if (typeof optionsRef.current.filter === 'function' && optionsRef.current.filter(message) !== true) {\n      return;\n    }\n\n    setLastMessage(message);\n  };\n};\n\nvar bindOpenHandler = function (webSocketInstance, optionsRef, setReadyState, reconnectCount) {\n  webSocketInstance.onopen = function (event) {\n    optionsRef.current.onOpen && optionsRef.current.onOpen(event);\n    reconnectCount.current = 0;\n    setReadyState(constants_1.ReadyState.OPEN);\n  };\n};\n\nvar bindCloseHandler = function (webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount) {\n  if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n    return function () {};\n  }\n\n  (0, util_1.assertIsWebSocket)(webSocketInstance, optionsRef.current.skipAssert);\n  var reconnectTimeout;\n\n  webSocketInstance.onclose = function (event) {\n    var _a, _b;\n\n    optionsRef.current.onClose && optionsRef.current.onClose(event);\n    setReadyState(constants_1.ReadyState.CLOSED);\n\n    if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {\n      var reconnectAttempts = (_a = optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT;\n\n      if (reconnectCount.current < reconnectAttempts) {\n        reconnectTimeout = window.setTimeout(function () {\n          reconnectCount.current++;\n          reconnect();\n        }, (_b = optionsRef.current.reconnectInterval) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(reconnectAttempts);\n        console.warn(\"Max reconnect attempts of \".concat(reconnectAttempts, \" exceeded\"));\n      }\n    }\n  };\n\n  return function () {\n    return reconnectTimeout && window.clearTimeout(reconnectTimeout);\n  };\n};\n\nvar bindErrorHandler = function (webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount) {\n  var reconnectTimeout;\n\n  webSocketInstance.onerror = function (error) {\n    var _a, _b;\n\n    optionsRef.current.onError && optionsRef.current.onError(error);\n\n    if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      optionsRef.current.onClose && optionsRef.current.onClose(__assign(__assign({}, error), {\n        code: 1006,\n        reason: \"An error occurred with the EventSource: \".concat(error),\n        wasClean: false\n      }));\n      setReadyState(constants_1.ReadyState.CLOSED);\n      webSocketInstance.close();\n    }\n\n    if (optionsRef.current.retryOnError) {\n      if (reconnectCount.current < ((_a = optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT)) {\n        reconnectTimeout = window.setTimeout(function () {\n          reconnectCount.current++;\n          reconnect();\n        }, (_b = optionsRef.current.reconnectInterval) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(optionsRef.current.reconnectAttempts);\n        console.warn(\"Max reconnect attempts of \".concat(optionsRef.current.reconnectAttempts, \" exceeded\"));\n      }\n    }\n  };\n\n  return function () {\n    return reconnectTimeout && window.clearTimeout(reconnectTimeout);\n  };\n};\n\nvar attachListeners = function (webSocketInstance, setters, optionsRef, reconnect, reconnectCount, sendMessage) {\n  var setLastMessage = setters.setLastMessage,\n      setReadyState = setters.setReadyState;\n  var interval;\n  var cancelReconnectOnClose;\n  var cancelReconnectOnError;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = (0, socket_io_1.setUpSocketIOPing)(sendMessage);\n  }\n\n  bindMessageHandler(webSocketInstance, optionsRef, setLastMessage);\n  bindOpenHandler(webSocketInstance, optionsRef, setReadyState, reconnectCount);\n  cancelReconnectOnClose = bindCloseHandler(webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount);\n  cancelReconnectOnError = bindErrorHandler(webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount);\n  return function () {\n    setReadyState(constants_1.ReadyState.CLOSING);\n    cancelReconnectOnClose();\n    cancelReconnectOnError();\n    webSocketInstance.close();\n    if (interval) clearInterval(interval);\n  };\n};\n\nexports.attachListeners = attachListeners;","map":{"version":3,"mappings":"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","names":["bindMessageHandler","webSocketInstance","optionsRef","setLastMessage","onmessage","message","current","onMessage","filter","bindOpenHandler","setReadyState","reconnectCount","onopen","event","onOpen","constants_1","OPEN","bindCloseHandler","reconnect","EventSource","skipAssert","reconnectTimeout","onclose","onClose","CLOSED","shouldReconnect","reconnectAttempts","_a","window","setTimeout","reconnectInterval","_b","onReconnectStop","console","warn","clearTimeout","bindErrorHandler","onerror","error","onError","__assign","code","reason","wasClean","close","retryOnError","attachListeners","setters","sendMessage","interval","cancelReconnectOnClose","cancelReconnectOnError","fromSocketIO","CLOSING","clearInterval","exports"],"sources":["/home/coxley/kegger/web/node_modules/react-use-websocket/src/lib/attach-listener.ts"],"sourcesContent":["import { MutableRefObject } from 'react';\nimport { setUpSocketIOPing } from './socket-io';\nimport {\n  DEFAULT_RECONNECT_LIMIT,\n  DEFAULT_RECONNECT_INTERVAL_MS,\n  ReadyState,\n  isEventSourceSupported,\n} from './constants';\nimport { Options, SendMessage, WebSocketLike } from './types';\nimport { assertIsWebSocket } from './util';\n\nexport interface Setters {\n  setLastMessage: (message: WebSocketEventMap['message']) => void;\n  setReadyState: (readyState: ReadyState) => void;\n}\n\nconst bindMessageHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setLastMessage: Setters['setLastMessage'],\n) => {\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\n    optionsRef.current.onMessage && optionsRef.current.onMessage(message);\n    if (typeof optionsRef.current.filter === 'function' && optionsRef.current.filter(message) !== true) {\n      return;\n    }\n    setLastMessage(message);\n  };\n};\n\nconst bindOpenHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnectCount: MutableRefObject<number>,\n) => {\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\n    optionsRef.current.onOpen && optionsRef.current.onOpen(event);\n    reconnectCount.current = 0;\n    setReadyState(ReadyState.OPEN);\n  };\n};\n\nconst bindCloseHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnect: () => void,\n  reconnectCount: MutableRefObject<number>,\n) => {\n  if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n    return () => {};\n  }\n  assertIsWebSocket(webSocketInstance, optionsRef.current.skipAssert);\n  let reconnectTimeout: number;\n\n  webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\n    optionsRef.current.onClose && optionsRef.current.onClose(event);\n    setReadyState(ReadyState.CLOSED);\n    if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {\n      const reconnectAttempts = optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n      if (reconnectCount.current < reconnectAttempts) {\n        reconnectTimeout = window.setTimeout(() => {\n          reconnectCount.current++;\n          reconnect();\n        }, optionsRef.current.reconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(reconnectAttempts);\n        console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\n      }\n    }\n  };\n\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\n};\n\nconst bindErrorHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnect: () => void,\n  reconnectCount: MutableRefObject<number>,\n) => {\n  let reconnectTimeout: number;\n\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\n    optionsRef.current.onError && optionsRef.current.onError(error);\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      optionsRef.current.onClose && optionsRef.current.onClose({\n        ...error,\n        code: 1006,\n        reason: `An error occurred with the EventSource: ${error}`,\n        wasClean: false,\n      });\n\n      setReadyState(ReadyState.CLOSED);\n      webSocketInstance.close();\n    }\n    \n    if (optionsRef.current.retryOnError) {\n      if (reconnectCount.current < (optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT)) {\n        reconnectTimeout = window.setTimeout(() => {\n          reconnectCount.current++;\n          reconnect();\n        }, optionsRef.current.reconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(optionsRef.current.reconnectAttempts as number);\n        console.warn(`Max reconnect attempts of ${optionsRef.current.reconnectAttempts} exceeded`);\n      }\n    }\n  };\n\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\n};\n\nexport const attachListeners = (\n    webSocketInstance: WebSocketLike,\n    setters: Setters,\n    optionsRef: MutableRefObject<Options>,\n    reconnect: () => void,\n    reconnectCount: MutableRefObject<number>,\n    sendMessage: SendMessage,\n  ): (() => void) => {\n  const { setLastMessage, setReadyState } = setters;\n\n  let interval: number;\n  let cancelReconnectOnClose: () => void;\n  let cancelReconnectOnError: () => void;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(\n    webSocketInstance,\n    optionsRef,\n    setLastMessage,\n  );\n\n  bindOpenHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnectCount,\n  );\n\n  cancelReconnectOnClose = bindCloseHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnect,\n    reconnectCount,\n  );\n\n  cancelReconnectOnError = bindErrorHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnect,\n    reconnectCount,\n  );\n\n  return () => {\n    setReadyState(ReadyState.CLOSING);\n    cancelReconnectOnClose();\n    cancelReconnectOnError();\n    webSocketInstance.close();\n    if (interval) clearInterval(interval);\n  };\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setUpSocketIOPing = exports.appendQueryParams = exports.parseSocketIOUrl = void 0;\n\nvar constants_1 = require(\"./constants\");\n\nvar parseSocketIOUrl = function parseSocketIOUrl(url) {\n  if (url) {\n    var isSecure = /^https|wss/.test(url);\n    var strippedProtocol = url.replace(/^(https?|wss?)(:\\/\\/)?/, '');\n    var removedFinalBackSlack = strippedProtocol.replace(/\\/$/, '');\n    var protocol = isSecure ? 'wss' : 'ws';\n    return \"\".concat(protocol, \"://\").concat(removedFinalBackSlack).concat(constants_1.SOCKET_IO_PATH);\n  } else if (url === '') {\n    var isSecure = /^https/.test(window.location.protocol);\n    var protocol = isSecure ? 'wss' : 'ws';\n    var port = window.location.port ? \":\".concat(window.location.port) : '';\n    return \"\".concat(protocol, \"://\").concat(window.location.hostname).concat(port).concat(constants_1.SOCKET_IO_PATH);\n  }\n\n  return url;\n};\n\nexports.parseSocketIOUrl = parseSocketIOUrl;\n\nvar appendQueryParams = function appendQueryParams(url, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  var hasParamsRegex = /\\?([\\w]+=[\\w]+)/;\n  var alreadyHasParams = hasParamsRegex.test(url);\n  var stringified = \"\".concat(Object.entries(params).reduce(function (next, _a) {\n    var key = _a[0],\n        value = _a[1];\n    return next + \"\".concat(key, \"=\").concat(value, \"&\");\n  }, '').slice(0, -1));\n  return \"\".concat(url).concat(alreadyHasParams ? '&' : '?').concat(stringified);\n};\n\nexports.appendQueryParams = appendQueryParams;\n\nvar setUpSocketIOPing = function setUpSocketIOPing(sendMessage, interval) {\n  if (interval === void 0) {\n    interval = constants_1.SOCKET_IO_PING_INTERVAL;\n  }\n\n  var ping = function ping() {\n    return sendMessage(constants_1.SOCKET_IO_PING_CODE);\n  };\n\n  return window.setInterval(ping, interval);\n};\n\nexports.setUpSocketIOPing = setUpSocketIOPing;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAGO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAY;EAC1C,IAAIA,GAAJ,EAAS;IACP,IAAMC,QAAQ,GAAG,aAAaC,IAAb,CAAkBF,GAAlB,CAAjB;IACA,IAAMG,gBAAgB,GAAGH,GAAG,CAACI,OAAJ,CAAY,wBAAZ,EAAsC,EAAtC,CAAzB;IACA,IAAMC,qBAAqB,GAAGF,gBAAgB,CAACC,OAAjB,CAAyB,KAAzB,EAAgC,EAAhC,CAA9B;IACA,IAAME,QAAQ,GAAGL,QAAQ,GAAG,KAAH,GAAW,IAApC;IAEA,OAAO,UAAGK,QAAH,EAAW,KAAX,EAAWC,MAAX,CAAiBF,qBAAjB,EAAsCE,MAAtC,CAAyCC,0BAAzC,CAAP;EACD,CAPD,MAOO,IAAIR,GAAG,KAAK,EAAZ,EAAgB;IACrB,IAAMC,QAAQ,GAAG,SAASC,IAAT,CAAcO,MAAM,CAACC,QAAP,CAAgBJ,QAA9B,CAAjB;IACA,IAAMA,QAAQ,GAAGL,QAAQ,GAAG,KAAH,GAAW,IAApC;IACA,IAAMU,IAAI,GAAGF,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,WAAIF,MAAM,CAACC,QAAP,CAAgBC,IAApB,CAAvB,GAAoD,EAAjE;IAEA,OAAO,UAAGL,QAAH,EAAW,KAAX,EAAWC,MAAX,CAAiBE,MAAM,CAACC,QAAP,CAAgBE,QAAjC,EAAyCL,MAAzC,CAA4CI,IAA5C,EAAgDJ,MAAhD,CAAmDC,0BAAnD,CAAP;EACD;;EAED,OAAOR,GAAP;AACD,CAjBM;;AAAMa,2BAAgBd,gBAAhB;;AAmBN,IAAMe,iBAAiB,GAAG,SAApBA,iBAAoB,CAACd,GAAD,EAAce,MAAd,EAAsC;EAAxB;IAAAA;EAAwB;;EACrE,IAAMC,cAAc,GAAG,iBAAvB;EACA,IAAMC,gBAAgB,GAAGD,cAAc,CAACd,IAAf,CAAoBF,GAApB,CAAzB;EAEA,IAAMkB,WAAW,GAAG,UAAGC,MAAM,CAACC,OAAP,CAAeL,MAAf,EAAuBM,MAAvB,CAA8B,UAACC,IAAD,EAAOC,EAAP,EAAmB;QAAXC,GAAG;QAAEC,KAAK;IACrE,OAAOH,IAAI,GAAG,UAAGE,GAAH,EAAM,GAAN,EAAMjB,MAAN,CAAUkB,KAAV,EAAe,GAAf,CAAd;EACD,CAFsB,EAEpB,EAFoB,EAEhBC,KAFgB,CAEV,CAFU,EAEP,CAAC,CAFM,CAAH,CAApB;EAIA,OAAO,UAAG1B,GAAH,EAAMO,MAAN,CAASU,gBAAgB,GAAG,GAAH,GAAS,GAAlC,EAAqCV,MAArC,CAAwCW,WAAxC,CAAP;AACD,CATM;;AAAML,4BAAiBC,iBAAjB;;AAWN,IAAMa,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,WAAD,EAA2BC,QAA3B,EAA6D;EAAlC;IAAAA,WAAWrB,mCAAX;EAAkC;;EAC5F,IAAMsB,IAAI,GAAG,SAAPA,IAAO;IAAM,kBAAW,CAACtB,+BAAD,CAAX;EAAgC,CAAnD;;EAEA,OAAOC,MAAM,CAACsB,WAAP,CAAmBD,IAAnB,EAAyBD,QAAzB,CAAP;AACD,CAJM;;AAAMhB,4BAAiBc,iBAAjB","names":["parseSocketIOUrl","url","isSecure","test","strippedProtocol","replace","removedFinalBackSlack","protocol","concat","constants_1","window","location","port","hostname","exports","appendQueryParams","params","hasParamsRegex","alreadyHasParams","stringified","Object","entries","reduce","next","_a","key","value","slice","setUpSocketIOPing","sendMessage","interval","ping","setInterval"],"sources":["/home/coxley/kegger/www/node_modules/react-use-websocket/src/lib/socket-io.ts"],"sourcesContent":["import { SOCKET_IO_PING_INTERVAL, SOCKET_IO_PATH, SOCKET_IO_PING_CODE } from './constants';\nimport { QueryParams, SendMessage } from './types';\n\nexport const parseSocketIOUrl = (url: string) => {\n  if (url) {\n    const isSecure = /^https|wss/.test(url);\n    const strippedProtocol = url.replace(/^(https?|wss?)(:\\/\\/)?/, '');\n    const removedFinalBackSlack = strippedProtocol.replace(/\\/$/, '');\n    const protocol = isSecure ? 'wss' : 'ws';\n\n    return `${protocol}://${removedFinalBackSlack}${SOCKET_IO_PATH}`;\n  } else if (url === '') {\n    const isSecure = /^https/.test(window.location.protocol);\n    const protocol = isSecure ? 'wss' : 'ws';\n    const port = window.location.port ? `:${window.location.port}` : '';\n\n    return `${protocol}://${window.location.hostname}${port}${SOCKET_IO_PATH}`;\n  }\n\n  return url;\n};\n\nexport const appendQueryParams = (url: string, params: QueryParams = {}): string => {\n  const hasParamsRegex = /\\?([\\w]+=[\\w]+)/;\n  const alreadyHasParams = hasParamsRegex.test(url);\n\n  const stringified = `${Object.entries(params).reduce((next, [key, value]) => {\n    return next + `${key}=${value}&`;\n  }, '').slice(0, -1)}`;\n\n  return `${url}${alreadyHasParams ? '&' : '?'}${stringified}`;\n};\n\nexport const setUpSocketIOPing = (sendMessage: SendMessage, interval = SOCKET_IO_PING_INTERVAL) => {\n  const ping = () => sendMessage(SOCKET_IO_PING_CODE);\n\n  return window.setInterval(ping, interval);\n};\n"]},"metadata":{},"sourceType":"script"}